// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Sprint {
  id        String   @id @default(cuid())
  number    Int
  tasks     Task[]
  projectId String
  from      DateTime
  due       DateTime

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@map(name: "sprints")
}

model Project {
  id                     String                  @id @default(cuid())
  name                   String
  inviteLinkId           String                  @unique
  sprints                Sprint[]
  currentSprintId        String                  @default("1")
  backlogId              String                  @unique
  ownerId                String
  projectUserPermissions ProjectUserPermission[]
  members                User[]
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @default(now()) @updatedAt

  backlog Backlog @relation(fields: [backlogId], references: [id], onDelete: Cascade)

  @@map(name: "projects")
}

enum TaskStatus {
  todo
  inProgress
  complete

  @@map(name: "task_statuses")
}

model ProjectUserPermission {
  projectId   String
  userId      String
  role        Role        @default(user)
  accessLevel AccessLevel @default(member)

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([projectId, userId])
  @@index([projectId])
  @@index([userId])
  @@map(name: "project_user_permissions")
}

enum Role {
  admin
  user

  @@map(name: "roles")
}

enum AccessLevel {
  owner
  member

  @@map(name: "access_levels")
}

model Backlog {
  id      String   @id @default(cuid())
  project Project?
  tasks   Task[]

  @@map(name: "backlogs")
}

model Task {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  due         DateTime?
  status      TaskStatus   @default(todo)
  sprintId    String?
  backlogId   String?
  attachments Attachment[]
  comments    Comment[]
  assignee    User[]       @relation("Assignee")
  name        String
  description String?      @db.Text
  userId      String

  createdBy User     @relation("Creator", fields: [userId], references: [id])
  sprint    Sprint?  @relation(fields: [sprintId], references: [id], onDelete: Cascade)
  backlog   Backlog? @relation(fields: [backlogId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sprintId])
  @@index([backlogId])
  @@map(name: "tasks")
}

model Comment {
  id            String   @id @default(cuid())
  commentatorId String
  taskId        String
  text          String   @db.Text
  createdAt     DateTime @default(now())

  task        Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  commentator User @relation(fields: [commentatorId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([commentatorId])
  @@map(name: "comments")
}

model Attachment {
  id        String   @id @default(cuid())
  taskId    String
  link      String
  authorId  String
  width     Float?
  height    Float?
  createdAt DateTime @default(now())

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([authorId])
  @@map(name: "attachments")
}

model User {
  id                     String                  @id
  email                  String?
  firstName              String?
  image                  String
  comments               Comment[]
  assigneeTasks          Task[]                  @relation("Assignee")
  projectUserPermissions ProjectUserPermission[]
  attachments            Attachment[]
  projects               Project[]
  createdTasks           Task[]                  @relation("Creator")

  @@map(name: "users")
}
